-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dataflow_dataflow_in_loop_VITIS_LOOP_112_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    channel_i : IN STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWVALID : OUT STD_LOGIC;
    m_axi_gmem2_AWREADY : IN STD_LOGIC;
    m_axi_gmem2_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_WVALID : OUT STD_LOGIC;
    m_axi_gmem2_WREADY : IN STD_LOGIC;
    m_axi_gmem2_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem2_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_WLAST : OUT STD_LOGIC;
    m_axi_gmem2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_ARVALID : OUT STD_LOGIC;
    m_axi_gmem2_ARREADY : IN STD_LOGIC;
    m_axi_gmem2_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_RVALID : IN STD_LOGIC;
    m_axi_gmem2_RREADY : OUT STD_LOGIC;
    m_axi_gmem2_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem2_RLAST : IN STD_LOGIC;
    m_axi_gmem2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_gmem2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BVALID : IN STD_LOGIC;
    m_axi_gmem2_BREADY : OUT STD_LOGIC;
    m_axi_gmem2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    output_r : IN STD_LOGIC_VECTOR (63 downto 0);
    output_r_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    channel_i_ap_vld : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of dataflow_dataflow_in_loop_VITIS_LOOP_112_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal input_buf_i_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_buf_t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_buf_1_i_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_buf_1_t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_buf_i_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_buf_t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_buf_1_i_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_buf_1_t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_buf_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_buf_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal entry_proc_U0_ap_start : STD_LOGIC;
    signal entry_proc_U0_ap_done : STD_LOGIC;
    signal entry_proc_U0_ap_continue : STD_LOGIC;
    signal entry_proc_U0_ap_idle : STD_LOGIC;
    signal entry_proc_U0_ap_ready : STD_LOGIC;
    signal entry_proc_U0_output_r_c_din : STD_LOGIC_VECTOR (63 downto 0);
    signal entry_proc_U0_output_r_c_write : STD_LOGIC;
    signal readDram_U0_ap_start : STD_LOGIC;
    signal readDram_U0_ap_done : STD_LOGIC;
    signal readDram_U0_ap_continue : STD_LOGIC;
    signal readDram_U0_ap_idle : STD_LOGIC;
    signal readDram_U0_ap_ready : STD_LOGIC;
    signal readDram_U0_m_axi_gmem0_AWVALID : STD_LOGIC;
    signal readDram_U0_m_axi_gmem0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal readDram_U0_m_axi_gmem0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal readDram_U0_m_axi_gmem0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal readDram_U0_m_axi_gmem0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal readDram_U0_m_axi_gmem0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal readDram_U0_m_axi_gmem0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal readDram_U0_m_axi_gmem0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal readDram_U0_m_axi_gmem0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal readDram_U0_m_axi_gmem0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal readDram_U0_m_axi_gmem0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal readDram_U0_m_axi_gmem0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal readDram_U0_m_axi_gmem0_WVALID : STD_LOGIC;
    signal readDram_U0_m_axi_gmem0_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal readDram_U0_m_axi_gmem0_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal readDram_U0_m_axi_gmem0_WLAST : STD_LOGIC;
    signal readDram_U0_m_axi_gmem0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal readDram_U0_m_axi_gmem0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal readDram_U0_m_axi_gmem0_ARVALID : STD_LOGIC;
    signal readDram_U0_m_axi_gmem0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal readDram_U0_m_axi_gmem0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal readDram_U0_m_axi_gmem0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal readDram_U0_m_axi_gmem0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal readDram_U0_m_axi_gmem0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal readDram_U0_m_axi_gmem0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal readDram_U0_m_axi_gmem0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal readDram_U0_m_axi_gmem0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal readDram_U0_m_axi_gmem0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal readDram_U0_m_axi_gmem0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal readDram_U0_m_axi_gmem0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal readDram_U0_m_axi_gmem0_RREADY : STD_LOGIC;
    signal readDram_U0_m_axi_gmem0_BREADY : STD_LOGIC;
    signal readDram_U0_input_buf_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal readDram_U0_input_buf_ce0 : STD_LOGIC;
    signal readDram_U0_input_buf_we0 : STD_LOGIC;
    signal readDram_U0_input_buf_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal readDram_U0_input_buf_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal readDram_U0_input_buf_1_ce0 : STD_LOGIC;
    signal readDram_U0_input_buf_1_we0 : STD_LOGIC;
    signal readDram_U0_input_buf_1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal readDram_U0_channel_i : STD_LOGIC_VECTOR (1 downto 0);
    signal readDram_U0_ap_return : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_channel_done_tmp : STD_LOGIC;
    signal tmp_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_tmp : STD_LOGIC := '0';
    signal ap_sync_channel_write_tmp : STD_LOGIC;
    signal ap_channel_done_input_buf_1 : STD_LOGIC;
    signal readDram_U0_input_buf_1_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_input_buf_1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_input_buf_1 : STD_LOGIC;
    signal ap_channel_done_input_buf : STD_LOGIC;
    signal readDram_U0_input_buf_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_input_buf : STD_LOGIC := '0';
    signal ap_sync_channel_write_input_buf : STD_LOGIC;
    signal weightDram_U0_ap_start : STD_LOGIC;
    signal weightDram_U0_ap_done : STD_LOGIC;
    signal weightDram_U0_ap_continue : STD_LOGIC;
    signal weightDram_U0_ap_idle : STD_LOGIC;
    signal weightDram_U0_ap_ready : STD_LOGIC;
    signal weightDram_U0_m_axi_gmem2_AWVALID : STD_LOGIC;
    signal weightDram_U0_m_axi_gmem2_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal weightDram_U0_m_axi_gmem2_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal weightDram_U0_m_axi_gmem2_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal weightDram_U0_m_axi_gmem2_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal weightDram_U0_m_axi_gmem2_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal weightDram_U0_m_axi_gmem2_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal weightDram_U0_m_axi_gmem2_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal weightDram_U0_m_axi_gmem2_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal weightDram_U0_m_axi_gmem2_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal weightDram_U0_m_axi_gmem2_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal weightDram_U0_m_axi_gmem2_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal weightDram_U0_m_axi_gmem2_WVALID : STD_LOGIC;
    signal weightDram_U0_m_axi_gmem2_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal weightDram_U0_m_axi_gmem2_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal weightDram_U0_m_axi_gmem2_WLAST : STD_LOGIC;
    signal weightDram_U0_m_axi_gmem2_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal weightDram_U0_m_axi_gmem2_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal weightDram_U0_m_axi_gmem2_ARVALID : STD_LOGIC;
    signal weightDram_U0_m_axi_gmem2_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal weightDram_U0_m_axi_gmem2_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal weightDram_U0_m_axi_gmem2_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal weightDram_U0_m_axi_gmem2_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal weightDram_U0_m_axi_gmem2_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal weightDram_U0_m_axi_gmem2_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal weightDram_U0_m_axi_gmem2_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal weightDram_U0_m_axi_gmem2_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal weightDram_U0_m_axi_gmem2_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal weightDram_U0_m_axi_gmem2_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal weightDram_U0_m_axi_gmem2_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal weightDram_U0_m_axi_gmem2_RREADY : STD_LOGIC;
    signal weightDram_U0_m_axi_gmem2_BREADY : STD_LOGIC;
    signal weightDram_U0_weight_buf_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal weightDram_U0_weight_buf_ce0 : STD_LOGIC;
    signal weightDram_U0_weight_buf_we0 : STD_LOGIC;
    signal weightDram_U0_weight_buf_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal weightDram_U0_weight_buf_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal weightDram_U0_weight_buf_1_ce0 : STD_LOGIC;
    signal weightDram_U0_weight_buf_1_we0 : STD_LOGIC;
    signal weightDram_U0_weight_buf_1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal weightDram_U0_channel_i : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_channel_done_weight_buf_1 : STD_LOGIC;
    signal weightDram_U0_weight_buf_1_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_weight_buf_1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_weight_buf_1 : STD_LOGIC;
    signal ap_channel_done_weight_buf : STD_LOGIC;
    signal weightDram_U0_weight_buf_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_weight_buf : STD_LOGIC := '0';
    signal ap_sync_channel_write_weight_buf : STD_LOGIC;
    signal run_PE_U0_ap_start : STD_LOGIC;
    signal run_PE_U0_ap_done : STD_LOGIC;
    signal run_PE_U0_ap_continue : STD_LOGIC;
    signal run_PE_U0_ap_idle : STD_LOGIC;
    signal run_PE_U0_ap_ready : STD_LOGIC;
    signal run_PE_U0_input_buf1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal run_PE_U0_input_buf1_ce0 : STD_LOGIC;
    signal run_PE_U0_input_buf_12_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal run_PE_U0_input_buf_12_ce0 : STD_LOGIC;
    signal run_PE_U0_weight_buf3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal run_PE_U0_weight_buf3_ce0 : STD_LOGIC;
    signal run_PE_U0_weight_buf_14_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal run_PE_U0_weight_buf_14_ce0 : STD_LOGIC;
    signal run_PE_U0_output_buf5_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal run_PE_U0_output_buf5_ce0 : STD_LOGIC;
    signal run_PE_U0_output_buf5_we0 : STD_LOGIC;
    signal run_PE_U0_output_buf5_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal writeDram_U0_ap_start : STD_LOGIC;
    signal writeDram_U0_ap_done : STD_LOGIC;
    signal writeDram_U0_ap_continue : STD_LOGIC;
    signal writeDram_U0_ap_idle : STD_LOGIC;
    signal writeDram_U0_ap_ready : STD_LOGIC;
    signal writeDram_U0_output_buf_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal writeDram_U0_output_buf_ce0 : STD_LOGIC;
    signal writeDram_U0_m_axi_gmem1_AWVALID : STD_LOGIC;
    signal writeDram_U0_m_axi_gmem1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal writeDram_U0_m_axi_gmem1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal writeDram_U0_m_axi_gmem1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal writeDram_U0_m_axi_gmem1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal writeDram_U0_m_axi_gmem1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal writeDram_U0_m_axi_gmem1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal writeDram_U0_m_axi_gmem1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal writeDram_U0_m_axi_gmem1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal writeDram_U0_m_axi_gmem1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal writeDram_U0_m_axi_gmem1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal writeDram_U0_m_axi_gmem1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal writeDram_U0_m_axi_gmem1_WVALID : STD_LOGIC;
    signal writeDram_U0_m_axi_gmem1_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal writeDram_U0_m_axi_gmem1_WSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal writeDram_U0_m_axi_gmem1_WLAST : STD_LOGIC;
    signal writeDram_U0_m_axi_gmem1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal writeDram_U0_m_axi_gmem1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal writeDram_U0_m_axi_gmem1_ARVALID : STD_LOGIC;
    signal writeDram_U0_m_axi_gmem1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal writeDram_U0_m_axi_gmem1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal writeDram_U0_m_axi_gmem1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal writeDram_U0_m_axi_gmem1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal writeDram_U0_m_axi_gmem1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal writeDram_U0_m_axi_gmem1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal writeDram_U0_m_axi_gmem1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal writeDram_U0_m_axi_gmem1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal writeDram_U0_m_axi_gmem1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal writeDram_U0_m_axi_gmem1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal writeDram_U0_m_axi_gmem1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal writeDram_U0_m_axi_gmem1_RREADY : STD_LOGIC;
    signal writeDram_U0_m_axi_gmem1_BREADY : STD_LOGIC;
    signal writeDram_U0_output_r_read : STD_LOGIC;
    signal input_buf_i_full_n : STD_LOGIC;
    signal input_buf_t_empty_n : STD_LOGIC;
    signal input_buf_1_i_full_n : STD_LOGIC;
    signal input_buf_1_t_empty_n : STD_LOGIC;
    signal weight_buf_i_full_n : STD_LOGIC;
    signal weight_buf_t_empty_n : STD_LOGIC;
    signal weight_buf_1_i_full_n : STD_LOGIC;
    signal weight_buf_1_t_empty_n : STD_LOGIC;
    signal output_buf_i_full_n : STD_LOGIC;
    signal output_buf_t_empty_n : STD_LOGIC;
    signal output_r_c_full_n : STD_LOGIC;
    signal output_r_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal output_r_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal output_r_c_empty_n : STD_LOGIC;
    signal tmp_dout : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_empty_n : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_entry_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_entry_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_readDram_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_readDram_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_weightDram_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_weightDram_U0_ap_ready : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component dataflow_entry_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r : IN STD_LOGIC_VECTOR (63 downto 0);
        output_r_c_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_r_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        output_r_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        output_r_c_full_n : IN STD_LOGIC;
        output_r_c_write : OUT STD_LOGIC );
    end component;


    component dataflow_readDram IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem0_AWREADY : IN STD_LOGIC;
        m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WVALID : OUT STD_LOGIC;
        m_axi_gmem0_WREADY : IN STD_LOGIC;
        m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WLAST : OUT STD_LOGIC;
        m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem0_ARREADY : IN STD_LOGIC;
        m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RVALID : IN STD_LOGIC;
        m_axi_gmem0_RREADY : OUT STD_LOGIC;
        m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem0_RLAST : IN STD_LOGIC;
        m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BVALID : IN STD_LOGIC;
        m_axi_gmem0_BREADY : OUT STD_LOGIC;
        m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_buf_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        input_buf_ce0 : OUT STD_LOGIC;
        input_buf_we0 : OUT STD_LOGIC;
        input_buf_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_buf_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        input_buf_1_ce0 : OUT STD_LOGIC;
        input_buf_1_we0 : OUT STD_LOGIC;
        input_buf_1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        channel_i : IN STD_LOGIC_VECTOR (1 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component dataflow_weightDram IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem2_AWVALID : OUT STD_LOGIC;
        m_axi_gmem2_AWREADY : IN STD_LOGIC;
        m_axi_gmem2_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_WVALID : OUT STD_LOGIC;
        m_axi_gmem2_WREADY : IN STD_LOGIC;
        m_axi_gmem2_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem2_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_WLAST : OUT STD_LOGIC;
        m_axi_gmem2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_ARVALID : OUT STD_LOGIC;
        m_axi_gmem2_ARREADY : IN STD_LOGIC;
        m_axi_gmem2_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_RVALID : IN STD_LOGIC;
        m_axi_gmem2_RREADY : OUT STD_LOGIC;
        m_axi_gmem2_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem2_RLAST : IN STD_LOGIC;
        m_axi_gmem2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_gmem2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_BVALID : IN STD_LOGIC;
        m_axi_gmem2_BREADY : OUT STD_LOGIC;
        m_axi_gmem2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        weight_buf_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        weight_buf_ce0 : OUT STD_LOGIC;
        weight_buf_we0 : OUT STD_LOGIC;
        weight_buf_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        weight_buf_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        weight_buf_1_ce0 : OUT STD_LOGIC;
        weight_buf_1_we0 : OUT STD_LOGIC;
        weight_buf_1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        channel_i : IN STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component dataflow_run_PE IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_buf1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        input_buf1_ce0 : OUT STD_LOGIC;
        input_buf1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        input_buf_12_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        input_buf_12_ce0 : OUT STD_LOGIC;
        input_buf_12_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        weight_buf3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        weight_buf3_ce0 : OUT STD_LOGIC;
        weight_buf3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        weight_buf_14_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        weight_buf_14_ce0 : OUT STD_LOGIC;
        weight_buf_14_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        output_buf5_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        output_buf5_ce0 : OUT STD_LOGIC;
        output_buf5_we0 : OUT STD_LOGIC;
        output_buf5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component dataflow_writeDram IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_buf_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        output_buf_ce0 : OUT STD_LOGIC;
        output_buf_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_AWVALID : OUT STD_LOGIC;
        m_axi_gmem1_AWREADY : IN STD_LOGIC;
        m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WVALID : OUT STD_LOGIC;
        m_axi_gmem1_WREADY : IN STD_LOGIC;
        m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem1_WLAST : OUT STD_LOGIC;
        m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_ARVALID : OUT STD_LOGIC;
        m_axi_gmem1_ARREADY : IN STD_LOGIC;
        m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RVALID : IN STD_LOGIC;
        m_axi_gmem1_RREADY : OUT STD_LOGIC;
        m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_RLAST : IN STD_LOGIC;
        m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_BVALID : IN STD_LOGIC;
        m_axi_gmem1_BREADY : OUT STD_LOGIC;
        m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        output_r_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        output_r_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        output_r_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        output_r_empty_n : IN STD_LOGIC;
        output_r_read : OUT STD_LOGIC );
    end component;


    component dataflow_dataflow_in_loop_VITIS_LOOP_112_1_input_buf_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component dataflow_dataflow_in_loop_VITIS_LOOP_112_1_output_buf_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component dataflow_fifo_w64_d4_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component dataflow_fifo_w2_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (1 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    input_buf_U : component dataflow_dataflow_in_loop_VITIS_LOOP_112_1_input_buf_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => readDram_U0_input_buf_address0,
        i_ce0 => readDram_U0_input_buf_ce0,
        i_we0 => readDram_U0_input_buf_we0,
        i_d0 => readDram_U0_input_buf_d0,
        i_q0 => input_buf_i_q0,
        t_address0 => run_PE_U0_input_buf1_address0,
        t_ce0 => run_PE_U0_input_buf1_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv8_0,
        t_q0 => input_buf_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => input_buf_i_full_n,
        i_write => ap_channel_done_input_buf,
        t_empty_n => input_buf_t_empty_n,
        t_read => run_PE_U0_ap_ready);

    input_buf_1_U : component dataflow_dataflow_in_loop_VITIS_LOOP_112_1_input_buf_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => readDram_U0_input_buf_1_address0,
        i_ce0 => readDram_U0_input_buf_1_ce0,
        i_we0 => readDram_U0_input_buf_1_we0,
        i_d0 => readDram_U0_input_buf_1_d0,
        i_q0 => input_buf_1_i_q0,
        t_address0 => run_PE_U0_input_buf_12_address0,
        t_ce0 => run_PE_U0_input_buf_12_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv8_0,
        t_q0 => input_buf_1_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => input_buf_1_i_full_n,
        i_write => ap_channel_done_input_buf_1,
        t_empty_n => input_buf_1_t_empty_n,
        t_read => run_PE_U0_ap_ready);

    weight_buf_U : component dataflow_dataflow_in_loop_VITIS_LOOP_112_1_input_buf_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => weightDram_U0_weight_buf_address0,
        i_ce0 => weightDram_U0_weight_buf_ce0,
        i_we0 => weightDram_U0_weight_buf_we0,
        i_d0 => weightDram_U0_weight_buf_d0,
        i_q0 => weight_buf_i_q0,
        t_address0 => run_PE_U0_weight_buf3_address0,
        t_ce0 => run_PE_U0_weight_buf3_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv8_0,
        t_q0 => weight_buf_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => weight_buf_i_full_n,
        i_write => ap_channel_done_weight_buf,
        t_empty_n => weight_buf_t_empty_n,
        t_read => run_PE_U0_ap_ready);

    weight_buf_1_U : component dataflow_dataflow_in_loop_VITIS_LOOP_112_1_input_buf_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => weightDram_U0_weight_buf_1_address0,
        i_ce0 => weightDram_U0_weight_buf_1_ce0,
        i_we0 => weightDram_U0_weight_buf_1_we0,
        i_d0 => weightDram_U0_weight_buf_1_d0,
        i_q0 => weight_buf_1_i_q0,
        t_address0 => run_PE_U0_weight_buf_14_address0,
        t_ce0 => run_PE_U0_weight_buf_14_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv8_0,
        t_q0 => weight_buf_1_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => weight_buf_1_i_full_n,
        i_write => ap_channel_done_weight_buf_1,
        t_empty_n => weight_buf_1_t_empty_n,
        t_read => run_PE_U0_ap_ready);

    output_buf_U : component dataflow_dataflow_in_loop_VITIS_LOOP_112_1_output_buf_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => run_PE_U0_output_buf5_address0,
        i_ce0 => run_PE_U0_output_buf5_ce0,
        i_we0 => run_PE_U0_output_buf5_we0,
        i_d0 => run_PE_U0_output_buf5_d0,
        i_q0 => output_buf_i_q0,
        t_address0 => writeDram_U0_output_buf_address0,
        t_ce0 => writeDram_U0_output_buf_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => output_buf_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => output_buf_i_full_n,
        i_write => run_PE_U0_ap_done,
        t_empty_n => output_buf_t_empty_n,
        t_read => writeDram_U0_ap_ready);

    entry_proc_U0 : component dataflow_entry_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => entry_proc_U0_ap_start,
        ap_done => entry_proc_U0_ap_done,
        ap_continue => entry_proc_U0_ap_continue,
        ap_idle => entry_proc_U0_ap_idle,
        ap_ready => entry_proc_U0_ap_ready,
        output_r => output_r,
        output_r_c_din => entry_proc_U0_output_r_c_din,
        output_r_c_num_data_valid => output_r_c_num_data_valid,
        output_r_c_fifo_cap => output_r_c_fifo_cap,
        output_r_c_full_n => output_r_c_full_n,
        output_r_c_write => entry_proc_U0_output_r_c_write);

    readDram_U0 : component dataflow_readDram
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => readDram_U0_ap_start,
        ap_done => readDram_U0_ap_done,
        ap_continue => readDram_U0_ap_continue,
        ap_idle => readDram_U0_ap_idle,
        ap_ready => readDram_U0_ap_ready,
        m_axi_gmem0_AWVALID => readDram_U0_m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY => ap_const_logic_0,
        m_axi_gmem0_AWADDR => readDram_U0_m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID => readDram_U0_m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN => readDram_U0_m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE => readDram_U0_m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST => readDram_U0_m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK => readDram_U0_m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE => readDram_U0_m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT => readDram_U0_m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS => readDram_U0_m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION => readDram_U0_m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER => readDram_U0_m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID => readDram_U0_m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY => ap_const_logic_0,
        m_axi_gmem0_WDATA => readDram_U0_m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB => readDram_U0_m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST => readDram_U0_m_axi_gmem0_WLAST,
        m_axi_gmem0_WID => readDram_U0_m_axi_gmem0_WID,
        m_axi_gmem0_WUSER => readDram_U0_m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID => readDram_U0_m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY => m_axi_gmem0_ARREADY,
        m_axi_gmem0_ARADDR => readDram_U0_m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID => readDram_U0_m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN => readDram_U0_m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE => readDram_U0_m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST => readDram_U0_m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK => readDram_U0_m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE => readDram_U0_m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT => readDram_U0_m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS => readDram_U0_m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION => readDram_U0_m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER => readDram_U0_m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID => m_axi_gmem0_RVALID,
        m_axi_gmem0_RREADY => readDram_U0_m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA => m_axi_gmem0_RDATA,
        m_axi_gmem0_RLAST => m_axi_gmem0_RLAST,
        m_axi_gmem0_RID => m_axi_gmem0_RID,
        m_axi_gmem0_RFIFONUM => m_axi_gmem0_RFIFONUM,
        m_axi_gmem0_RUSER => m_axi_gmem0_RUSER,
        m_axi_gmem0_RRESP => m_axi_gmem0_RRESP,
        m_axi_gmem0_BVALID => ap_const_logic_0,
        m_axi_gmem0_BREADY => readDram_U0_m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP => ap_const_lv2_0,
        m_axi_gmem0_BID => ap_const_lv1_0,
        m_axi_gmem0_BUSER => ap_const_lv1_0,
        input_buf_address0 => readDram_U0_input_buf_address0,
        input_buf_ce0 => readDram_U0_input_buf_ce0,
        input_buf_we0 => readDram_U0_input_buf_we0,
        input_buf_d0 => readDram_U0_input_buf_d0,
        input_buf_1_address0 => readDram_U0_input_buf_1_address0,
        input_buf_1_ce0 => readDram_U0_input_buf_1_ce0,
        input_buf_1_we0 => readDram_U0_input_buf_1_we0,
        input_buf_1_d0 => readDram_U0_input_buf_1_d0,
        channel_i => readDram_U0_channel_i,
        ap_return => readDram_U0_ap_return);

    weightDram_U0 : component dataflow_weightDram
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => weightDram_U0_ap_start,
        ap_done => weightDram_U0_ap_done,
        ap_continue => weightDram_U0_ap_continue,
        ap_idle => weightDram_U0_ap_idle,
        ap_ready => weightDram_U0_ap_ready,
        m_axi_gmem2_AWVALID => weightDram_U0_m_axi_gmem2_AWVALID,
        m_axi_gmem2_AWREADY => ap_const_logic_0,
        m_axi_gmem2_AWADDR => weightDram_U0_m_axi_gmem2_AWADDR,
        m_axi_gmem2_AWID => weightDram_U0_m_axi_gmem2_AWID,
        m_axi_gmem2_AWLEN => weightDram_U0_m_axi_gmem2_AWLEN,
        m_axi_gmem2_AWSIZE => weightDram_U0_m_axi_gmem2_AWSIZE,
        m_axi_gmem2_AWBURST => weightDram_U0_m_axi_gmem2_AWBURST,
        m_axi_gmem2_AWLOCK => weightDram_U0_m_axi_gmem2_AWLOCK,
        m_axi_gmem2_AWCACHE => weightDram_U0_m_axi_gmem2_AWCACHE,
        m_axi_gmem2_AWPROT => weightDram_U0_m_axi_gmem2_AWPROT,
        m_axi_gmem2_AWQOS => weightDram_U0_m_axi_gmem2_AWQOS,
        m_axi_gmem2_AWREGION => weightDram_U0_m_axi_gmem2_AWREGION,
        m_axi_gmem2_AWUSER => weightDram_U0_m_axi_gmem2_AWUSER,
        m_axi_gmem2_WVALID => weightDram_U0_m_axi_gmem2_WVALID,
        m_axi_gmem2_WREADY => ap_const_logic_0,
        m_axi_gmem2_WDATA => weightDram_U0_m_axi_gmem2_WDATA,
        m_axi_gmem2_WSTRB => weightDram_U0_m_axi_gmem2_WSTRB,
        m_axi_gmem2_WLAST => weightDram_U0_m_axi_gmem2_WLAST,
        m_axi_gmem2_WID => weightDram_U0_m_axi_gmem2_WID,
        m_axi_gmem2_WUSER => weightDram_U0_m_axi_gmem2_WUSER,
        m_axi_gmem2_ARVALID => weightDram_U0_m_axi_gmem2_ARVALID,
        m_axi_gmem2_ARREADY => m_axi_gmem2_ARREADY,
        m_axi_gmem2_ARADDR => weightDram_U0_m_axi_gmem2_ARADDR,
        m_axi_gmem2_ARID => weightDram_U0_m_axi_gmem2_ARID,
        m_axi_gmem2_ARLEN => weightDram_U0_m_axi_gmem2_ARLEN,
        m_axi_gmem2_ARSIZE => weightDram_U0_m_axi_gmem2_ARSIZE,
        m_axi_gmem2_ARBURST => weightDram_U0_m_axi_gmem2_ARBURST,
        m_axi_gmem2_ARLOCK => weightDram_U0_m_axi_gmem2_ARLOCK,
        m_axi_gmem2_ARCACHE => weightDram_U0_m_axi_gmem2_ARCACHE,
        m_axi_gmem2_ARPROT => weightDram_U0_m_axi_gmem2_ARPROT,
        m_axi_gmem2_ARQOS => weightDram_U0_m_axi_gmem2_ARQOS,
        m_axi_gmem2_ARREGION => weightDram_U0_m_axi_gmem2_ARREGION,
        m_axi_gmem2_ARUSER => weightDram_U0_m_axi_gmem2_ARUSER,
        m_axi_gmem2_RVALID => m_axi_gmem2_RVALID,
        m_axi_gmem2_RREADY => weightDram_U0_m_axi_gmem2_RREADY,
        m_axi_gmem2_RDATA => m_axi_gmem2_RDATA,
        m_axi_gmem2_RLAST => m_axi_gmem2_RLAST,
        m_axi_gmem2_RID => m_axi_gmem2_RID,
        m_axi_gmem2_RFIFONUM => m_axi_gmem2_RFIFONUM,
        m_axi_gmem2_RUSER => m_axi_gmem2_RUSER,
        m_axi_gmem2_RRESP => m_axi_gmem2_RRESP,
        m_axi_gmem2_BVALID => ap_const_logic_0,
        m_axi_gmem2_BREADY => weightDram_U0_m_axi_gmem2_BREADY,
        m_axi_gmem2_BRESP => ap_const_lv2_0,
        m_axi_gmem2_BID => ap_const_lv1_0,
        m_axi_gmem2_BUSER => ap_const_lv1_0,
        weight_buf_address0 => weightDram_U0_weight_buf_address0,
        weight_buf_ce0 => weightDram_U0_weight_buf_ce0,
        weight_buf_we0 => weightDram_U0_weight_buf_we0,
        weight_buf_d0 => weightDram_U0_weight_buf_d0,
        weight_buf_1_address0 => weightDram_U0_weight_buf_1_address0,
        weight_buf_1_ce0 => weightDram_U0_weight_buf_1_ce0,
        weight_buf_1_we0 => weightDram_U0_weight_buf_1_we0,
        weight_buf_1_d0 => weightDram_U0_weight_buf_1_d0,
        channel_i => weightDram_U0_channel_i);

    run_PE_U0 : component dataflow_run_PE
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => run_PE_U0_ap_start,
        ap_done => run_PE_U0_ap_done,
        ap_continue => run_PE_U0_ap_continue,
        ap_idle => run_PE_U0_ap_idle,
        ap_ready => run_PE_U0_ap_ready,
        input_buf1_address0 => run_PE_U0_input_buf1_address0,
        input_buf1_ce0 => run_PE_U0_input_buf1_ce0,
        input_buf1_q0 => input_buf_t_q0,
        input_buf_12_address0 => run_PE_U0_input_buf_12_address0,
        input_buf_12_ce0 => run_PE_U0_input_buf_12_ce0,
        input_buf_12_q0 => input_buf_1_t_q0,
        weight_buf3_address0 => run_PE_U0_weight_buf3_address0,
        weight_buf3_ce0 => run_PE_U0_weight_buf3_ce0,
        weight_buf3_q0 => weight_buf_t_q0,
        weight_buf_14_address0 => run_PE_U0_weight_buf_14_address0,
        weight_buf_14_ce0 => run_PE_U0_weight_buf_14_ce0,
        weight_buf_14_q0 => weight_buf_1_t_q0,
        output_buf5_address0 => run_PE_U0_output_buf5_address0,
        output_buf5_ce0 => run_PE_U0_output_buf5_ce0,
        output_buf5_we0 => run_PE_U0_output_buf5_we0,
        output_buf5_d0 => run_PE_U0_output_buf5_d0,
        p_read => tmp_dout);

    writeDram_U0 : component dataflow_writeDram
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => writeDram_U0_ap_start,
        ap_done => writeDram_U0_ap_done,
        ap_continue => writeDram_U0_ap_continue,
        ap_idle => writeDram_U0_ap_idle,
        ap_ready => writeDram_U0_ap_ready,
        output_buf_address0 => writeDram_U0_output_buf_address0,
        output_buf_ce0 => writeDram_U0_output_buf_ce0,
        output_buf_q0 => output_buf_t_q0,
        m_axi_gmem1_AWVALID => writeDram_U0_m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY => m_axi_gmem1_AWREADY,
        m_axi_gmem1_AWADDR => writeDram_U0_m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID => writeDram_U0_m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN => writeDram_U0_m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE => writeDram_U0_m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST => writeDram_U0_m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK => writeDram_U0_m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE => writeDram_U0_m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT => writeDram_U0_m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS => writeDram_U0_m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION => writeDram_U0_m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER => writeDram_U0_m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID => writeDram_U0_m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY => m_axi_gmem1_WREADY,
        m_axi_gmem1_WDATA => writeDram_U0_m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB => writeDram_U0_m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST => writeDram_U0_m_axi_gmem1_WLAST,
        m_axi_gmem1_WID => writeDram_U0_m_axi_gmem1_WID,
        m_axi_gmem1_WUSER => writeDram_U0_m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID => writeDram_U0_m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY => ap_const_logic_0,
        m_axi_gmem1_ARADDR => writeDram_U0_m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID => writeDram_U0_m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN => writeDram_U0_m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE => writeDram_U0_m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST => writeDram_U0_m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK => writeDram_U0_m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE => writeDram_U0_m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT => writeDram_U0_m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS => writeDram_U0_m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION => writeDram_U0_m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER => writeDram_U0_m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID => ap_const_logic_0,
        m_axi_gmem1_RREADY => writeDram_U0_m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA => ap_const_lv64_0,
        m_axi_gmem1_RLAST => ap_const_logic_0,
        m_axi_gmem1_RID => ap_const_lv1_0,
        m_axi_gmem1_RFIFONUM => ap_const_lv9_0,
        m_axi_gmem1_RUSER => ap_const_lv1_0,
        m_axi_gmem1_RRESP => ap_const_lv2_0,
        m_axi_gmem1_BVALID => m_axi_gmem1_BVALID,
        m_axi_gmem1_BREADY => writeDram_U0_m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP => m_axi_gmem1_BRESP,
        m_axi_gmem1_BID => m_axi_gmem1_BID,
        m_axi_gmem1_BUSER => m_axi_gmem1_BUSER,
        output_r_dout => output_r_c_dout,
        output_r_num_data_valid => output_r_c_num_data_valid,
        output_r_fifo_cap => output_r_c_fifo_cap,
        output_r_empty_n => output_r_c_empty_n,
        output_r_read => writeDram_U0_output_r_read);

    output_r_c_U : component dataflow_fifo_w64_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_output_r_c_din,
        if_full_n => output_r_c_full_n,
        if_write => entry_proc_U0_output_r_c_write,
        if_dout => output_r_c_dout,
        if_num_data_valid => output_r_c_num_data_valid,
        if_fifo_cap => output_r_c_fifo_cap,
        if_empty_n => output_r_c_empty_n,
        if_read => writeDram_U0_output_r_read);

    tmp_U : component dataflow_fifo_w2_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => readDram_U0_ap_return,
        if_full_n => tmp_full_n,
        if_write => ap_channel_done_tmp,
        if_dout => tmp_dout,
        if_num_data_valid => tmp_num_data_valid,
        if_fifo_cap => tmp_fifo_cap,
        if_empty_n => tmp_empty_n,
        if_read => run_PE_U0_ap_ready);





    ap_sync_reg_channel_write_input_buf_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_input_buf <= ap_const_logic_0;
            else
                if (((readDram_U0_ap_done and readDram_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_input_buf <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_input_buf <= ap_sync_channel_write_input_buf;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_input_buf_1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_input_buf_1 <= ap_const_logic_0;
            else
                if (((readDram_U0_ap_done and readDram_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_input_buf_1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_input_buf_1 <= ap_sync_channel_write_input_buf_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_tmp_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_tmp <= ap_const_logic_0;
            else
                if (((readDram_U0_ap_done and readDram_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_tmp <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_tmp <= ap_sync_channel_write_tmp;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_weight_buf_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_weight_buf <= ap_const_logic_0;
            else
                if (((weightDram_U0_ap_done and weightDram_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_weight_buf <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_weight_buf <= ap_sync_channel_write_weight_buf;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_weight_buf_1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_weight_buf_1 <= ap_const_logic_0;
            else
                if (((weightDram_U0_ap_done and weightDram_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_weight_buf_1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_weight_buf_1 <= ap_sync_channel_write_weight_buf_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_entry_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_readDram_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_readDram_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_readDram_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_readDram_U0_ap_ready <= ap_sync_readDram_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_weightDram_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_weightDram_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_weightDram_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_weightDram_U0_ap_ready <= ap_sync_weightDram_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    ap_channel_done_input_buf <= (readDram_U0_ap_done and (ap_sync_reg_channel_write_input_buf xor ap_const_logic_1));
    ap_channel_done_input_buf_1 <= (readDram_U0_ap_done and (ap_sync_reg_channel_write_input_buf_1 xor ap_const_logic_1));
    ap_channel_done_tmp <= (readDram_U0_ap_done and (ap_sync_reg_channel_write_tmp xor ap_const_logic_1));
    ap_channel_done_weight_buf <= (weightDram_U0_ap_done and (ap_sync_reg_channel_write_weight_buf xor ap_const_logic_1));
    ap_channel_done_weight_buf_1 <= (weightDram_U0_ap_done and (ap_sync_reg_channel_write_weight_buf_1 xor ap_const_logic_1));
    ap_done <= writeDram_U0_ap_done;
    ap_idle <= (writeDram_U0_ap_idle and weightDram_U0_ap_idle and run_PE_U0_ap_idle and readDram_U0_ap_idle and (tmp_empty_n xor ap_const_logic_1) and (output_buf_t_empty_n xor ap_const_logic_1) and (weight_buf_1_t_empty_n xor ap_const_logic_1) and (weight_buf_t_empty_n xor ap_const_logic_1) and (input_buf_1_t_empty_n xor ap_const_logic_1) and (input_buf_t_empty_n xor ap_const_logic_1) and entry_proc_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_channel_write_input_buf <= ((readDram_U0_input_buf_full_n and ap_channel_done_input_buf) or ap_sync_reg_channel_write_input_buf);
    ap_sync_channel_write_input_buf_1 <= ((readDram_U0_input_buf_1_full_n and ap_channel_done_input_buf_1) or ap_sync_reg_channel_write_input_buf_1);
    ap_sync_channel_write_tmp <= ((tmp_full_n and ap_channel_done_tmp) or ap_sync_reg_channel_write_tmp);
    ap_sync_channel_write_weight_buf <= ((weightDram_U0_weight_buf_full_n and ap_channel_done_weight_buf) or ap_sync_reg_channel_write_weight_buf);
    ap_sync_channel_write_weight_buf_1 <= ((weightDram_U0_weight_buf_1_full_n and ap_channel_done_weight_buf_1) or ap_sync_reg_channel_write_weight_buf_1);
    ap_sync_entry_proc_U0_ap_ready <= (entry_proc_U0_ap_ready or ap_sync_reg_entry_proc_U0_ap_ready);
    ap_sync_readDram_U0_ap_ready <= (readDram_U0_ap_ready or ap_sync_reg_readDram_U0_ap_ready);
    ap_sync_ready <= (ap_sync_weightDram_U0_ap_ready and ap_sync_readDram_U0_ap_ready and ap_sync_entry_proc_U0_ap_ready);
    ap_sync_weightDram_U0_ap_ready <= (weightDram_U0_ap_ready or ap_sync_reg_weightDram_U0_ap_ready);
    entry_proc_U0_ap_continue <= ap_const_logic_1;
    entry_proc_U0_ap_start <= ((ap_sync_reg_entry_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    m_axi_gmem0_ARADDR <= readDram_U0_m_axi_gmem0_ARADDR;
    m_axi_gmem0_ARBURST <= readDram_U0_m_axi_gmem0_ARBURST;
    m_axi_gmem0_ARCACHE <= readDram_U0_m_axi_gmem0_ARCACHE;
    m_axi_gmem0_ARID <= readDram_U0_m_axi_gmem0_ARID;
    m_axi_gmem0_ARLEN <= readDram_U0_m_axi_gmem0_ARLEN;
    m_axi_gmem0_ARLOCK <= readDram_U0_m_axi_gmem0_ARLOCK;
    m_axi_gmem0_ARPROT <= readDram_U0_m_axi_gmem0_ARPROT;
    m_axi_gmem0_ARQOS <= readDram_U0_m_axi_gmem0_ARQOS;
    m_axi_gmem0_ARREGION <= readDram_U0_m_axi_gmem0_ARREGION;
    m_axi_gmem0_ARSIZE <= readDram_U0_m_axi_gmem0_ARSIZE;
    m_axi_gmem0_ARUSER <= readDram_U0_m_axi_gmem0_ARUSER;
    m_axi_gmem0_ARVALID <= readDram_U0_m_axi_gmem0_ARVALID;
    m_axi_gmem0_AWADDR <= ap_const_lv64_0;
    m_axi_gmem0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem0_AWID <= ap_const_lv1_0;
    m_axi_gmem0_AWLEN <= ap_const_lv32_0;
    m_axi_gmem0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem0_AWUSER <= ap_const_lv1_0;
    m_axi_gmem0_AWVALID <= ap_const_logic_0;
    m_axi_gmem0_BREADY <= ap_const_logic_0;
    m_axi_gmem0_RREADY <= readDram_U0_m_axi_gmem0_RREADY;
    m_axi_gmem0_WDATA <= ap_const_lv8_0;
    m_axi_gmem0_WID <= ap_const_lv1_0;
    m_axi_gmem0_WLAST <= ap_const_logic_0;
    m_axi_gmem0_WSTRB <= ap_const_lv1_0;
    m_axi_gmem0_WUSER <= ap_const_lv1_0;
    m_axi_gmem0_WVALID <= ap_const_logic_0;
    m_axi_gmem1_ARADDR <= ap_const_lv64_0;
    m_axi_gmem1_ARBURST <= ap_const_lv2_0;
    m_axi_gmem1_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem1_ARID <= ap_const_lv1_0;
    m_axi_gmem1_ARLEN <= ap_const_lv32_0;
    m_axi_gmem1_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem1_ARPROT <= ap_const_lv3_0;
    m_axi_gmem1_ARQOS <= ap_const_lv4_0;
    m_axi_gmem1_ARREGION <= ap_const_lv4_0;
    m_axi_gmem1_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem1_ARUSER <= ap_const_lv1_0;
    m_axi_gmem1_ARVALID <= ap_const_logic_0;
    m_axi_gmem1_AWADDR <= writeDram_U0_m_axi_gmem1_AWADDR;
    m_axi_gmem1_AWBURST <= writeDram_U0_m_axi_gmem1_AWBURST;
    m_axi_gmem1_AWCACHE <= writeDram_U0_m_axi_gmem1_AWCACHE;
    m_axi_gmem1_AWID <= writeDram_U0_m_axi_gmem1_AWID;
    m_axi_gmem1_AWLEN <= writeDram_U0_m_axi_gmem1_AWLEN;
    m_axi_gmem1_AWLOCK <= writeDram_U0_m_axi_gmem1_AWLOCK;
    m_axi_gmem1_AWPROT <= writeDram_U0_m_axi_gmem1_AWPROT;
    m_axi_gmem1_AWQOS <= writeDram_U0_m_axi_gmem1_AWQOS;
    m_axi_gmem1_AWREGION <= writeDram_U0_m_axi_gmem1_AWREGION;
    m_axi_gmem1_AWSIZE <= writeDram_U0_m_axi_gmem1_AWSIZE;
    m_axi_gmem1_AWUSER <= writeDram_U0_m_axi_gmem1_AWUSER;
    m_axi_gmem1_AWVALID <= writeDram_U0_m_axi_gmem1_AWVALID;
    m_axi_gmem1_BREADY <= writeDram_U0_m_axi_gmem1_BREADY;
    m_axi_gmem1_RREADY <= ap_const_logic_0;
    m_axi_gmem1_WDATA <= writeDram_U0_m_axi_gmem1_WDATA;
    m_axi_gmem1_WID <= writeDram_U0_m_axi_gmem1_WID;
    m_axi_gmem1_WLAST <= writeDram_U0_m_axi_gmem1_WLAST;
    m_axi_gmem1_WSTRB <= writeDram_U0_m_axi_gmem1_WSTRB;
    m_axi_gmem1_WUSER <= writeDram_U0_m_axi_gmem1_WUSER;
    m_axi_gmem1_WVALID <= writeDram_U0_m_axi_gmem1_WVALID;
    m_axi_gmem2_ARADDR <= weightDram_U0_m_axi_gmem2_ARADDR;
    m_axi_gmem2_ARBURST <= weightDram_U0_m_axi_gmem2_ARBURST;
    m_axi_gmem2_ARCACHE <= weightDram_U0_m_axi_gmem2_ARCACHE;
    m_axi_gmem2_ARID <= weightDram_U0_m_axi_gmem2_ARID;
    m_axi_gmem2_ARLEN <= weightDram_U0_m_axi_gmem2_ARLEN;
    m_axi_gmem2_ARLOCK <= weightDram_U0_m_axi_gmem2_ARLOCK;
    m_axi_gmem2_ARPROT <= weightDram_U0_m_axi_gmem2_ARPROT;
    m_axi_gmem2_ARQOS <= weightDram_U0_m_axi_gmem2_ARQOS;
    m_axi_gmem2_ARREGION <= weightDram_U0_m_axi_gmem2_ARREGION;
    m_axi_gmem2_ARSIZE <= weightDram_U0_m_axi_gmem2_ARSIZE;
    m_axi_gmem2_ARUSER <= weightDram_U0_m_axi_gmem2_ARUSER;
    m_axi_gmem2_ARVALID <= weightDram_U0_m_axi_gmem2_ARVALID;
    m_axi_gmem2_AWADDR <= ap_const_lv64_0;
    m_axi_gmem2_AWBURST <= ap_const_lv2_0;
    m_axi_gmem2_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem2_AWID <= ap_const_lv1_0;
    m_axi_gmem2_AWLEN <= ap_const_lv32_0;
    m_axi_gmem2_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem2_AWPROT <= ap_const_lv3_0;
    m_axi_gmem2_AWQOS <= ap_const_lv4_0;
    m_axi_gmem2_AWREGION <= ap_const_lv4_0;
    m_axi_gmem2_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem2_AWUSER <= ap_const_lv1_0;
    m_axi_gmem2_AWVALID <= ap_const_logic_0;
    m_axi_gmem2_BREADY <= ap_const_logic_0;
    m_axi_gmem2_RREADY <= weightDram_U0_m_axi_gmem2_RREADY;
    m_axi_gmem2_WDATA <= ap_const_lv8_0;
    m_axi_gmem2_WID <= ap_const_lv1_0;
    m_axi_gmem2_WLAST <= ap_const_logic_0;
    m_axi_gmem2_WSTRB <= ap_const_lv1_0;
    m_axi_gmem2_WUSER <= ap_const_lv1_0;
    m_axi_gmem2_WVALID <= ap_const_logic_0;
    readDram_U0_ap_continue <= (ap_sync_channel_write_tmp and ap_sync_channel_write_input_buf_1 and ap_sync_channel_write_input_buf);
    readDram_U0_ap_start <= ((ap_sync_reg_readDram_U0_ap_ready xor ap_const_logic_1) and ap_start);
    
    readDram_U0_channel_i_proc : process(channel_i)
    variable vlo_cpy : STD_LOGIC_VECTOR(3+3 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(3+3 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(3 - 1 downto 0);
    variable readDram_U0_channel_i_i : integer;
    variable section : STD_LOGIC_VECTOR(3 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(3 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(3 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(2 - 1 downto 0) := ap_const_lv3_0(2 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(2 - 1 downto 0) := ap_const_lv3_2(2 - 1 downto 0);
        v0_cpy := channel_i;
        if (vlo_cpy(2 - 1 downto 0) > vhi_cpy(2 - 1 downto 0)) then
            vhi_cpy(2-1 downto 0) := std_logic_vector(3-1-unsigned(ap_const_lv3_2(2-1 downto 0)));
            vlo_cpy(2-1 downto 0) := std_logic_vector(3-1-unsigned(ap_const_lv3_0(2-1 downto 0)));
            for readDram_U0_channel_i_i in 0 to 3-1 loop
                v0_cpy(readDram_U0_channel_i_i) := channel_i(3-1-readDram_U0_channel_i_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(2-1 downto 0)))));

        section := (others=>'0');
        section(2-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(2-1 downto 0)) - unsigned(vlo_cpy(2-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(3-1 downto 0)))));
        res_mask := res_mask(3-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        readDram_U0_channel_i <= resvalue(2-1 downto 0);
    end process;

    readDram_U0_input_buf_1_full_n <= input_buf_1_i_full_n;
    readDram_U0_input_buf_full_n <= input_buf_i_full_n;
    run_PE_U0_ap_continue <= output_buf_i_full_n;
    run_PE_U0_ap_start <= (weight_buf_t_empty_n and weight_buf_1_t_empty_n and tmp_empty_n and input_buf_t_empty_n and input_buf_1_t_empty_n);
    weightDram_U0_ap_continue <= (ap_sync_channel_write_weight_buf_1 and ap_sync_channel_write_weight_buf);
    weightDram_U0_ap_start <= ((ap_sync_reg_weightDram_U0_ap_ready xor ap_const_logic_1) and ap_start);
    
    weightDram_U0_channel_i_proc : process(channel_i)
    variable vlo_cpy : STD_LOGIC_VECTOR(3+3 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(3+3 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(3 - 1 downto 0);
    variable weightDram_U0_channel_i_i : integer;
    variable section : STD_LOGIC_VECTOR(3 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(3 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(3 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(2 - 1 downto 0) := ap_const_lv3_0(2 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(2 - 1 downto 0) := ap_const_lv3_2(2 - 1 downto 0);
        v0_cpy := channel_i;
        if (vlo_cpy(2 - 1 downto 0) > vhi_cpy(2 - 1 downto 0)) then
            vhi_cpy(2-1 downto 0) := std_logic_vector(3-1-unsigned(ap_const_lv3_2(2-1 downto 0)));
            vlo_cpy(2-1 downto 0) := std_logic_vector(3-1-unsigned(ap_const_lv3_0(2-1 downto 0)));
            for weightDram_U0_channel_i_i in 0 to 3-1 loop
                v0_cpy(weightDram_U0_channel_i_i) := channel_i(3-1-weightDram_U0_channel_i_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(2-1 downto 0)))));

        section := (others=>'0');
        section(2-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(2-1 downto 0)) - unsigned(vlo_cpy(2-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(3-1 downto 0)))));
        res_mask := res_mask(3-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        weightDram_U0_channel_i <= resvalue(2-1 downto 0);
    end process;

    weightDram_U0_weight_buf_1_full_n <= weight_buf_1_i_full_n;
    weightDram_U0_weight_buf_full_n <= weight_buf_i_full_n;
    writeDram_U0_ap_continue <= ap_continue;
    writeDram_U0_ap_start <= output_buf_t_empty_n;
end behav;
