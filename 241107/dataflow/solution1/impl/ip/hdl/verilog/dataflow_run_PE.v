// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dataflow_run_PE (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        input_buf1_address0,
        input_buf1_ce0,
        input_buf1_q0,
        input_buf_12_address0,
        input_buf_12_ce0,
        input_buf_12_q0,
        weight_buf3_address0,
        weight_buf3_ce0,
        weight_buf3_q0,
        weight_buf_14_address0,
        weight_buf_14_ce0,
        weight_buf_14_q0,
        output_buf5_address0,
        output_buf5_ce0,
        output_buf5_we0,
        output_buf5_d0,
        p_read
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [2:0] input_buf1_address0;
output   input_buf1_ce0;
input  [7:0] input_buf1_q0;
output  [2:0] input_buf_12_address0;
output   input_buf_12_ce0;
input  [7:0] input_buf_12_q0;
output  [2:0] weight_buf3_address0;
output   weight_buf3_ce0;
input  [7:0] weight_buf3_q0;
output  [2:0] weight_buf_14_address0;
output   weight_buf_14_ce0;
input  [7:0] weight_buf_14_q0;
output  [1:0] output_buf5_address0;
output   output_buf5_ce0;
output   output_buf5_we0;
output  [31:0] output_buf5_d0;
input  [1:0] p_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_buf1_ce0;
reg input_buf_12_ce0;
reg weight_buf3_ce0;
reg weight_buf_14_ce0;
reg output_buf5_ce0;
reg output_buf5_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] tmp_fu_202_p3;
reg   [2:0] tmp_reg_402;
reg   [1:0] ki_3_reg_407;
wire    ap_CS_fsm_state2;
wire   [1:0] shl_ln61_fu_218_p2;
reg   [1:0] shl_ln61_reg_413;
wire   [1:0] add_ln55_fu_230_p2;
reg   [1:0] add_ln55_reg_421;
wire    ap_CS_fsm_state3;
reg   [1:0] output_reg_addr_reg_453;
wire   [1:0] add_ln57_fu_274_p2;
reg   [1:0] add_ln57_reg_461;
wire   [63:0] zext_ln65_fu_320_p1;
reg   [63:0] zext_ln65_reg_466;
wire    ap_CS_fsm_state5;
wire   [1:0] shl_ln77_fu_324_p2;
reg   [1:0] shl_ln77_reg_471;
reg   [1:0] output_buf5_addr_reg_476;
wire   [1:0] add_ln65_fu_341_p2;
reg   [1:0] add_ln65_reg_484;
wire    ap_CS_fsm_state6;
wire   [1:0] add_ln68_fu_363_p2;
reg   [1:0] add_ln68_reg_497;
reg   [0:0] output_temp_0_addr_reg_502;
wire   [0:0] icmp_ln68_fu_357_p2;
wire   [16:0] sum_1_fu_377_p2;
wire    ap_CS_fsm_state7;
reg   [1:0] output_reg_address0;
reg    output_reg_ce0;
reg    output_reg_we0;
wire   [15:0] output_reg_q0;
reg   [0:0] output_temp_0_address0;
reg    output_temp_0_ce0;
reg    output_temp_0_we0;
wire   [31:0] output_temp_0_q0;
reg   [1:0] ci_reg_168;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln55_fu_224_p2;
reg   [1:0] ci_1_reg_179;
wire   [0:0] icmp_ln65_fu_335_p2;
reg  signed [16:0] sum_reg_190;
wire   [63:0] zext_ln59_1_fu_250_p1;
wire   [63:0] zext_ln61_fu_263_p1;
wire   [63:0] zext_ln77_fu_330_p1;
wire   [63:0] zext_ln70_fu_352_p1;
reg   [1:0] ki_fu_52;
wire   [0:0] icmp_ln57_fu_268_p2;
reg    ap_block_state1;
reg   [1:0] ki_1_fu_64;
wire   [15:0] mul_ln61_fu_310_p2;
wire    ap_CS_fsm_state8;
wire   [31:0] add_ln75_fu_387_p2;
wire   [2:0] zext_ln59_fu_241_p1;
wire   [2:0] add_ln59_fu_245_p2;
wire   [1:0] add_ln61_fu_258_p2;
wire  signed [7:0] data_fu_284_p4;
wire  signed [7:0] weight_fu_297_p4;
wire   [1:0] add_ln70_fu_347_p2;
wire  signed [16:0] output_reg_load_cast1_i_fu_373_p1;
wire  signed [31:0] sext_ln68_fu_383_p1;
reg   [7:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 8'd1;
end

dataflow_run_PE_output_reg_RAM_AUTO_1R1W #(
    .DataWidth( 16 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
output_reg_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(output_reg_address0),
    .ce0(output_reg_ce0),
    .we0(output_reg_we0),
    .d0(mul_ln61_fu_310_p2),
    .q0(output_reg_q0)
);

dataflow_run_PE_output_temp_0_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 2 ),
    .AddressWidth( 1 ))
output_temp_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(output_temp_0_address0),
    .ce0(output_temp_0_ce0),
    .we0(output_temp_0_we0),
    .d0(add_ln75_fu_387_p2),
    .q0(output_temp_0_q0)
);

dataflow_mux_22_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_22_8_1_1_U11(
    .din0(input_buf1_q0),
    .din1(input_buf_12_q0),
    .din2(ki_3_reg_407),
    .dout(data_fu_284_p4)
);

dataflow_mux_22_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_22_8_1_1_U12(
    .din0(weight_buf3_q0),
    .din1(weight_buf_14_q0),
    .din2(ki_3_reg_407),
    .dout(weight_fu_297_p4)
);

dataflow_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U13(
    .din0(weight_fu_297_p4),
    .din1(data_fu_284_p4),
    .dout(mul_ln61_fu_310_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln65_fu_335_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln65_fu_335_p2 == 1'd0))) begin
        ci_1_reg_179 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        ci_1_reg_179 <= add_ln68_reg_497;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln55_fu_224_p2 == 1'd0))) begin
        ci_reg_168 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ci_reg_168 <= add_ln57_reg_461;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln55_fu_224_p2 == 1'd1))) begin
        ki_1_fu_64 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln68_fu_357_p2 == 1'd1))) begin
        ki_1_fu_64 <= add_ln65_reg_484;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ki_fu_52 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln57_fu_268_p2 == 1'd1))) begin
        ki_fu_52 <= add_ln55_reg_421;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln65_fu_335_p2 == 1'd0))) begin
        sum_reg_190 <= 17'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sum_reg_190 <= sum_1_fu_377_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln55_reg_421 <= add_ln55_fu_230_p2;
        ki_3_reg_407 <= ki_fu_52;
        shl_ln61_reg_413[1] <= shl_ln61_fu_218_p2[1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln57_reg_461 <= add_ln57_fu_274_p2;
        output_reg_addr_reg_453 <= zext_ln61_fu_263_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln65_reg_484 <= add_ln65_fu_341_p2;
        output_buf5_addr_reg_476[1] <= zext_ln77_fu_330_p1[1];
        shl_ln77_reg_471[1] <= shl_ln77_fu_324_p2[1];
        zext_ln65_reg_466[1 : 0] <= zext_ln65_fu_320_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln68_reg_497 <= add_ln68_fu_363_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln68_fu_357_p2 == 1'd1))) begin
        output_temp_0_addr_reg_502 <= zext_ln65_reg_466;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        tmp_reg_402[2 : 1] <= tmp_fu_202_p3[2 : 1];
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln65_fu_335_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln65_fu_335_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_buf1_ce0 = 1'b1;
    end else begin
        input_buf1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_buf_12_ce0 = 1'b1;
    end else begin
        input_buf_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        output_buf5_ce0 = 1'b1;
    end else begin
        output_buf5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        output_buf5_we0 = 1'b1;
    end else begin
        output_buf5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_reg_address0 = zext_ln70_fu_352_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        output_reg_address0 = output_reg_addr_reg_453;
    end else begin
        output_reg_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6))) begin
        output_reg_ce0 = 1'b1;
    end else begin
        output_reg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_reg_we0 = 1'b1;
    end else begin
        output_reg_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        output_temp_0_address0 = output_temp_0_addr_reg_502;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        output_temp_0_address0 = zext_ln65_reg_466;
    end else begin
        output_temp_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        output_temp_0_ce0 = 1'b1;
    end else begin
        output_temp_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        output_temp_0_we0 = 1'b1;
    end else begin
        output_temp_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        weight_buf3_ce0 = 1'b1;
    end else begin
        weight_buf3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        weight_buf_14_ce0 = 1'b1;
    end else begin
        weight_buf_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln55_fu_224_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln57_fu_268_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln65_fu_335_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln68_fu_357_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln55_fu_230_p2 = (ki_fu_52 + 2'd1);

assign add_ln57_fu_274_p2 = (ci_reg_168 + 2'd1);

assign add_ln59_fu_245_p2 = (tmp_reg_402 + zext_ln59_fu_241_p1);

assign add_ln61_fu_258_p2 = (shl_ln61_reg_413 + ci_reg_168);

assign add_ln65_fu_341_p2 = (ki_1_fu_64 + 2'd1);

assign add_ln68_fu_363_p2 = (ci_1_reg_179 + 2'd1);

assign add_ln70_fu_347_p2 = (shl_ln77_reg_471 + ci_1_reg_179);

assign add_ln75_fu_387_p2 = ($signed(output_temp_0_q0) + $signed(sext_ln68_fu_383_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign icmp_ln55_fu_224_p2 = ((ki_fu_52 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_268_p2 = ((ci_reg_168 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_335_p2 = ((ki_1_fu_64 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln68_fu_357_p2 = ((ci_1_reg_179 == 2'd2) ? 1'b1 : 1'b0);

assign input_buf1_address0 = zext_ln59_1_fu_250_p1;

assign input_buf_12_address0 = zext_ln59_1_fu_250_p1;

assign output_buf5_address0 = output_buf5_addr_reg_476;

assign output_buf5_d0 = add_ln75_fu_387_p2;

assign output_reg_load_cast1_i_fu_373_p1 = $signed(output_reg_q0);

assign sext_ln68_fu_383_p1 = sum_reg_190;

assign shl_ln61_fu_218_p2 = ki_fu_52 << 2'd1;

assign shl_ln77_fu_324_p2 = ki_1_fu_64 << 2'd1;

assign sum_1_fu_377_p2 = ($signed(output_reg_load_cast1_i_fu_373_p1) + $signed(sum_reg_190));

assign tmp_fu_202_p3 = {{p_read}, {1'd0}};

assign weight_buf3_address0 = zext_ln59_1_fu_250_p1;

assign weight_buf_14_address0 = zext_ln59_1_fu_250_p1;

assign zext_ln59_1_fu_250_p1 = add_ln59_fu_245_p2;

assign zext_ln59_fu_241_p1 = ci_reg_168;

assign zext_ln61_fu_263_p1 = add_ln61_fu_258_p2;

assign zext_ln65_fu_320_p1 = ki_1_fu_64;

assign zext_ln70_fu_352_p1 = add_ln70_fu_347_p2;

assign zext_ln77_fu_330_p1 = shl_ln77_fu_324_p2;

always @ (posedge ap_clk) begin
    tmp_reg_402[0] <= 1'b0;
    shl_ln61_reg_413[0] <= 1'b0;
    zext_ln65_reg_466[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    shl_ln77_reg_471[0] <= 1'b0;
    output_buf5_addr_reg_476[0] <= 1'b0;
end

endmodule //dataflow_run_PE
