-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dataflow_run_PE is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_buf1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_buf1_ce0 : OUT STD_LOGIC;
    input_buf1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    input_buf_12_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_buf_12_ce0 : OUT STD_LOGIC;
    input_buf_12_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_buf3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weight_buf3_ce0 : OUT STD_LOGIC;
    weight_buf3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_buf_14_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weight_buf_14_ce0 : OUT STD_LOGIC;
    weight_buf_14_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_buf5_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    output_buf5_ce0 : OUT STD_LOGIC;
    output_buf5_we0 : OUT STD_LOGIC;
    output_buf5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_read : IN STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of dataflow_run_PE is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_fu_202_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_reg_402 : STD_LOGIC_VECTOR (2 downto 0);
    signal ki_3_reg_407 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal shl_ln61_fu_218_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln61_reg_413 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln55_fu_230_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln55_reg_421 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal output_reg_addr_reg_453 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln57_fu_274_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln57_reg_461 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_fu_320_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln65_reg_466 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal shl_ln77_fu_324_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln77_reg_471 : STD_LOGIC_VECTOR (1 downto 0);
    signal output_buf5_addr_reg_476 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln65_fu_341_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln65_reg_484 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln68_fu_363_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln68_reg_497 : STD_LOGIC_VECTOR (1 downto 0);
    signal output_temp_0_addr_reg_502 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_1_fu_377_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal output_reg_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal output_reg_ce0 : STD_LOGIC;
    signal output_reg_we0 : STD_LOGIC;
    signal output_reg_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_temp_0_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_temp_0_ce0 : STD_LOGIC;
    signal output_temp_0_we0 : STD_LOGIC;
    signal output_temp_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ci_reg_168 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln55_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ci_1_reg_179 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln65_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_reg_190 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln59_1_fu_250_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_fu_263_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln77_fu_330_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_fu_352_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ki_fu_52 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln57_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ki_1_fu_64 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln61_fu_310_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln75_fu_387_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln59_fu_241_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln59_fu_245_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln61_fu_258_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal data_fu_284_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_fu_297_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln70_fu_347_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal output_reg_load_cast1_i_fu_373_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln68_fu_383_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component dataflow_mux_22_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component dataflow_mul_8s_8s_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component dataflow_run_PE_output_reg_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component dataflow_run_PE_output_temp_0_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    output_reg_U : component dataflow_run_PE_output_reg_RAM_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_reg_address0,
        ce0 => output_reg_ce0,
        we0 => output_reg_we0,
        d0 => mul_ln61_fu_310_p2,
        q0 => output_reg_q0);

    output_temp_0_U : component dataflow_run_PE_output_temp_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_temp_0_address0,
        ce0 => output_temp_0_ce0,
        we0 => output_temp_0_we0,
        d0 => add_ln75_fu_387_p2,
        q0 => output_temp_0_q0);

    mux_22_8_1_1_U11 : component dataflow_mux_22_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => input_buf1_q0,
        din1 => input_buf_12_q0,
        din2 => ki_3_reg_407,
        dout => data_fu_284_p4);

    mux_22_8_1_1_U12 : component dataflow_mux_22_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_buf3_q0,
        din1 => weight_buf_14_q0,
        din2 => ki_3_reg_407,
        dout => weight_fu_297_p4);

    mul_8s_8s_16_1_1_U13 : component dataflow_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => weight_fu_297_p4,
        din1 => data_fu_284_p4,
        dout => mul_ln61_fu_310_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln65_fu_335_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ci_1_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln65_fu_335_p2 = ap_const_lv1_0))) then 
                ci_1_reg_179 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                ci_1_reg_179 <= add_ln68_reg_497;
            end if; 
        end if;
    end process;

    ci_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln55_fu_224_p2 = ap_const_lv1_0))) then 
                ci_reg_168 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                ci_reg_168 <= add_ln57_reg_461;
            end if; 
        end if;
    end process;

    ki_1_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln55_fu_224_p2 = ap_const_lv1_1))) then 
                ki_1_fu_64 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln68_fu_357_p2 = ap_const_lv1_1))) then 
                ki_1_fu_64 <= add_ln65_reg_484;
            end if; 
        end if;
    end process;

    ki_fu_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ki_fu_52 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln57_fu_268_p2 = ap_const_lv1_1))) then 
                ki_fu_52 <= add_ln55_reg_421;
            end if; 
        end if;
    end process;

    sum_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln65_fu_335_p2 = ap_const_lv1_0))) then 
                sum_reg_190 <= ap_const_lv17_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                sum_reg_190 <= sum_1_fu_377_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln55_reg_421 <= add_ln55_fu_230_p2;
                ki_3_reg_407 <= ki_fu_52;
                    shl_ln61_reg_413(1) <= shl_ln61_fu_218_p2(1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln57_reg_461 <= add_ln57_fu_274_p2;
                output_reg_addr_reg_453 <= zext_ln61_fu_263_p1(2 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln65_reg_484 <= add_ln65_fu_341_p2;
                    output_buf5_addr_reg_476(1) <= zext_ln77_fu_330_p1(2 - 1 downto 0)(1);
                    shl_ln77_reg_471(1) <= shl_ln77_fu_324_p2(1);
                    zext_ln65_reg_466(1 downto 0) <= zext_ln65_fu_320_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln68_reg_497 <= add_ln68_fu_363_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln68_fu_357_p2 = ap_const_lv1_1))) then
                output_temp_0_addr_reg_502 <= zext_ln65_reg_466(1 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    tmp_reg_402(2 downto 1) <= tmp_fu_202_p3(2 downto 1);
            end if;
        end if;
    end process;
    tmp_reg_402(0) <= '0';
    shl_ln61_reg_413(0) <= '0';
    zext_ln65_reg_466(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";
    shl_ln77_reg_471(0) <= '0';
    output_buf5_addr_reg_476(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6, icmp_ln68_fu_357_p2, icmp_ln55_fu_224_p2, icmp_ln65_fu_335_p2, icmp_ln57_fu_268_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln55_fu_224_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln57_fu_268_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln65_fu_335_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln68_fu_357_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln55_fu_230_p2 <= std_logic_vector(unsigned(ki_fu_52) + unsigned(ap_const_lv2_1));
    add_ln57_fu_274_p2 <= std_logic_vector(unsigned(ci_reg_168) + unsigned(ap_const_lv2_1));
    add_ln59_fu_245_p2 <= std_logic_vector(unsigned(tmp_reg_402) + unsigned(zext_ln59_fu_241_p1));
    add_ln61_fu_258_p2 <= std_logic_vector(unsigned(shl_ln61_reg_413) + unsigned(ci_reg_168));
    add_ln65_fu_341_p2 <= std_logic_vector(unsigned(ki_1_fu_64) + unsigned(ap_const_lv2_1));
    add_ln68_fu_363_p2 <= std_logic_vector(unsigned(ci_1_reg_179) + unsigned(ap_const_lv2_1));
    add_ln70_fu_347_p2 <= std_logic_vector(unsigned(shl_ln77_reg_471) + unsigned(ci_1_reg_179));
    add_ln75_fu_387_p2 <= std_logic_vector(unsigned(output_temp_0_q0) + unsigned(sext_ln68_fu_383_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state5, icmp_ln65_fu_335_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln65_fu_335_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, icmp_ln65_fu_335_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln65_fu_335_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln55_fu_224_p2 <= "1" when (ki_fu_52 = ap_const_lv2_2) else "0";
    icmp_ln57_fu_268_p2 <= "1" when (ci_reg_168 = ap_const_lv2_2) else "0";
    icmp_ln65_fu_335_p2 <= "1" when (ki_1_fu_64 = ap_const_lv2_2) else "0";
    icmp_ln68_fu_357_p2 <= "1" when (ci_1_reg_179 = ap_const_lv2_2) else "0";
    input_buf1_address0 <= zext_ln59_1_fu_250_p1(3 - 1 downto 0);

    input_buf1_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_buf1_ce0 <= ap_const_logic_1;
        else 
            input_buf1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_buf_12_address0 <= zext_ln59_1_fu_250_p1(3 - 1 downto 0);

    input_buf_12_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_buf_12_ce0 <= ap_const_logic_1;
        else 
            input_buf_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_buf5_address0 <= output_buf5_addr_reg_476;

    output_buf5_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_buf5_ce0 <= ap_const_logic_1;
        else 
            output_buf5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_buf5_d0 <= add_ln75_fu_387_p2;

    output_buf5_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_buf5_we0 <= ap_const_logic_1;
        else 
            output_buf5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_reg_address0_assign_proc : process(output_reg_addr_reg_453, ap_CS_fsm_state6, ap_CS_fsm_state4, zext_ln70_fu_352_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_reg_address0 <= zext_ln70_fu_352_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_reg_address0 <= output_reg_addr_reg_453;
        else 
            output_reg_address0 <= "XX";
        end if; 
    end process;


    output_reg_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            output_reg_ce0 <= ap_const_logic_1;
        else 
            output_reg_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        output_reg_load_cast1_i_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(output_reg_q0),17));


    output_reg_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_reg_we0 <= ap_const_logic_1;
        else 
            output_reg_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_temp_0_address0_assign_proc : process(zext_ln65_reg_466, ap_CS_fsm_state6, output_temp_0_addr_reg_502, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_temp_0_address0 <= output_temp_0_addr_reg_502;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_temp_0_address0 <= zext_ln65_reg_466(1 - 1 downto 0);
        else 
            output_temp_0_address0 <= "X";
        end if; 
    end process;


    output_temp_0_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            output_temp_0_ce0 <= ap_const_logic_1;
        else 
            output_temp_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_temp_0_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_temp_0_we0 <= ap_const_logic_1;
        else 
            output_temp_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln68_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum_reg_190),32));

    shl_ln61_fu_218_p2 <= std_logic_vector(shift_left(unsigned(ki_fu_52),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    shl_ln77_fu_324_p2 <= std_logic_vector(shift_left(unsigned(ki_1_fu_64),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    sum_1_fu_377_p2 <= std_logic_vector(signed(output_reg_load_cast1_i_fu_373_p1) + signed(sum_reg_190));
    tmp_fu_202_p3 <= (p_read & ap_const_lv1_0);
    weight_buf3_address0 <= zext_ln59_1_fu_250_p1(3 - 1 downto 0);

    weight_buf3_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            weight_buf3_ce0 <= ap_const_logic_1;
        else 
            weight_buf3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_14_address0 <= zext_ln59_1_fu_250_p1(3 - 1 downto 0);

    weight_buf_14_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            weight_buf_14_ce0 <= ap_const_logic_1;
        else 
            weight_buf_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln59_1_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln59_fu_245_p2),64));
    zext_ln59_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ci_reg_168),3));
    zext_ln61_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln61_fu_258_p2),64));
    zext_ln65_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ki_1_fu_64),64));
    zext_ln70_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln70_fu_347_p2),64));
    zext_ln77_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln77_fu_324_p2),64));
end behav;
